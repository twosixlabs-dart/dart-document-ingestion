kafka {
  application.id: dart-pipeline
  group.id: dart-pipeline

  bootstrap.servers: "kafka-broker-1:19092"
  bootstrap.servers: ${?KAFKA_BOOTSTRAP_SERVERS}

  fetch.message.max.bytes: 50000
  max.request.size: 5000000
  buffer.memory: 50000000
  batch.size: 300000
  linger.ms: 10
  fetch.message.max.bytes: 5000000
  max.partition.fetch.bytes: 5000000
}

default.global.timeout.seconds: 4

http-client {
  connect.timeout.ms: 90000
  call.timeout.ms: 90000
  read.timeout.ms: 90000
  write.timeout.ms: 90000
}

annotators: {
  enabled: true
  enabled: ${?ANNOTATORS_ENABLED}

  mode: rest
  host: ${?ANNOTATOR_HOST}

  retry.count: 6
  retry.pause.millis: 1000

  defs: [
    {
      name: qntfy-ner-annotator,
      host: ${?QNTFY_NER_HOST},
      port: 45000,
      path: api/v1/annotate/cdr
      post.process: true
    },
    {
      name: qntfy-events-annotator,
      host: ${?QNTFY_EVENTS_HOST},
      port: 45001,
      path: api/v1/annotate/cdr
      post.process: true
    },
    {
      name: qntfy-categories-annotator,
      host: ${?QNTFY_CATEGORIES_HOST},
      port: 45002,
      path: api/v1/annotate/cdr
      post.process: false
    },
    {
      name: qntfy-key-sentence-annotator,
      host: ${?QNTFY_KEY_SENTENCE_HOST}
      port: 45008,
      path: api/v1/annotate/cdr
      post.process: true
    }
    //    {
    //      name: qntfy-entity-linking,
    //      port: 45003,
    //      path: api/v1/annotate/cdr
    //      post.process: true
    //    },
    //    {
    //      name: qntfy-location,
    //      port: 45004,
    //      path: api/v1/annotate/cdr
    //      post.process: true
    //    },
    // {
    //      name: qntfy-genealogy-annotator,
    //      port: 45005,
    //      path: api/v1/annotate/cdr
    //      post.process: false
    //    },
    //    {
    //      name: qntfy-sentiment-annotator,
    //      port: 45006,
    //      path: api/v1/annotate/cdr
    //      post.process: false
    //    },
    //    {
    //      name: qntfy-stance-detection-annotator,
    //      port: 45007,
    //      path: api/v1/annotate/cdr
    //      post.process: false
    //    },
    //    {
    //      name: qntfy-textrank-annotator,
    //      port: 45009,
    //      path: api/v1/annotate/cdr
    //      post.process: false
    //    }
  ]
}


ingest-proxy {
  kafka {
    key.serializer: org.apache.kafka.common.serialization.StringSerializer
    key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value.serializer: org.apache.kafka.common.serialization.StringSerializer
    value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
    max.poll.records: 500
    max.poll.records: ${?POLL_SIZE}
    max.poll.interval.ms: 350000
  }
}

notifications {
  stream.annotation.updates: true
  stream.annotation.updates: ${?STREAM_ANNOTATION_UPDATES}
  key.serializer: org.apache.kafka.common.serialization.StringSerializer
  value.serializer: org.apache.kafka.common.serialization.StringSerializer
  pool.size: 250
}

operations {
  pool.size: 100
}

sql-conf {
  h2 {
    engine: h2
    name: dart_db_mem
  }

  postgresql {
    engine: postgresql

    host: dart-postgres
    host: ${?SQL_DB_HOST}

    port: 5432
    port: ${?SQL_DB_PORT}

    user: dart
    user: ${?SQL_DB_USER}

    password: dart_pass
    password: ${?SQL_DB_PASSWORD}

    name: dart_db
    name: ${?SQL_DB_NAME}
  }

}

cdr-datastore {
  arangodb {
    database: dart
    database: ${?ARANGODB_DATABASE}
    host: localhost
    host: ${?ARANGODB_HOST}
    port: 8529
    port: ${?ARANGODB_PORT}
    connection.pool: 25
    connection.pool: ${?ARANGODB_CONNECTION_POOL}
  }

  cassandra {
    keyspace: dart
    keyspace: ${?CASSANDRA_KEYSPACE}
    host: cassandra
    host: ${?CASSANDRA_HOST}
    port: 9042
    port: ${?CASSANDRA_PORT}
  }

  mem {
    size: 1000
  }
}

search-indexer {
  host: dart-es-master
  host: ${?SEARCH_HOST}

  port: 9200
  port: ${?SEARCH_PORT}
}

dedup {
  mode: embedded
  mode: ${?DEDUP_MODE}

  max.words: 200
  max.words: ${?DEDUP_MAX_WORDS}

  embedded {
    algorithm: shingleprint
    algorithm: ${?DEDUP_EMBEDDED_ALGORITHM}

    shingleprint {
      window: 10
      window: ${?DEDUP_EMBEDDED_SHINGLEPRINT_WINDOW}
      cache {
        mode: disk
        dir = /opt/app/data
      }
    }
  }

}

preprocessors: []
